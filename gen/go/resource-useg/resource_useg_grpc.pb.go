// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.5
// source: resource-useg/resource_useg.proto

package resource_useg1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ResourceUsegService_CreateResourceUseg_FullMethodName   = "/ResourceUsegService/CreateResourceUseg"
	ResourceUsegService_GetAllResourceUseg_FullMethodName   = "/ResourceUsegService/GetAllResourceUseg"
	ResourceUsegService_DeleteResourceUseg_FullMethodName   = "/ResourceUsegService/DeleteResourceUseg"
	ResourceUsegService_GetResourceBYGroupId_FullMethodName = "/ResourceUsegService/GetResourceBYGroupId"
)

// ResourceUsegServiceClient is the client API for ResourceUsegService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceUsegServiceClient interface {
	CreateResourceUseg(ctx context.Context, in *CreateResourceUsegReq, opts ...grpc.CallOption) (*ResourceUseg, error)
	GetAllResourceUseg(ctx context.Context, in *GetAllResourceUsegReq, opts ...grpc.CallOption) (*GetAllResourceUsegRes, error)
	DeleteResourceUseg(ctx context.Context, in *DeleteResourceUsegReq, opts ...grpc.CallOption) (*DeleteResourceUsegRes, error)
	GetResourceBYGroupId(ctx context.Context, in *GetResourceBYGroupIdReq, opts ...grpc.CallOption) (*ResourceByGroupIdRes, error)
}

type resourceUsegServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceUsegServiceClient(cc grpc.ClientConnInterface) ResourceUsegServiceClient {
	return &resourceUsegServiceClient{cc}
}

func (c *resourceUsegServiceClient) CreateResourceUseg(ctx context.Context, in *CreateResourceUsegReq, opts ...grpc.CallOption) (*ResourceUseg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceUseg)
	err := c.cc.Invoke(ctx, ResourceUsegService_CreateResourceUseg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceUsegServiceClient) GetAllResourceUseg(ctx context.Context, in *GetAllResourceUsegReq, opts ...grpc.CallOption) (*GetAllResourceUsegRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllResourceUsegRes)
	err := c.cc.Invoke(ctx, ResourceUsegService_GetAllResourceUseg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceUsegServiceClient) DeleteResourceUseg(ctx context.Context, in *DeleteResourceUsegReq, opts ...grpc.CallOption) (*DeleteResourceUsegRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResourceUsegRes)
	err := c.cc.Invoke(ctx, ResourceUsegService_DeleteResourceUseg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceUsegServiceClient) GetResourceBYGroupId(ctx context.Context, in *GetResourceBYGroupIdReq, opts ...grpc.CallOption) (*ResourceByGroupIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceByGroupIdRes)
	err := c.cc.Invoke(ctx, ResourceUsegService_GetResourceBYGroupId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceUsegServiceServer is the server API for ResourceUsegService service.
// All implementations must embed UnimplementedResourceUsegServiceServer
// for forward compatibility
type ResourceUsegServiceServer interface {
	CreateResourceUseg(context.Context, *CreateResourceUsegReq) (*ResourceUseg, error)
	GetAllResourceUseg(context.Context, *GetAllResourceUsegReq) (*GetAllResourceUsegRes, error)
	DeleteResourceUseg(context.Context, *DeleteResourceUsegReq) (*DeleteResourceUsegRes, error)
	GetResourceBYGroupId(context.Context, *GetResourceBYGroupIdReq) (*ResourceByGroupIdRes, error)
	mustEmbedUnimplementedResourceUsegServiceServer()
}

// UnimplementedResourceUsegServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResourceUsegServiceServer struct {
}

func (UnimplementedResourceUsegServiceServer) CreateResourceUseg(context.Context, *CreateResourceUsegReq) (*ResourceUseg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceUseg not implemented")
}
func (UnimplementedResourceUsegServiceServer) GetAllResourceUseg(context.Context, *GetAllResourceUsegReq) (*GetAllResourceUsegRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllResourceUseg not implemented")
}
func (UnimplementedResourceUsegServiceServer) DeleteResourceUseg(context.Context, *DeleteResourceUsegReq) (*DeleteResourceUsegRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceUseg not implemented")
}
func (UnimplementedResourceUsegServiceServer) GetResourceBYGroupId(context.Context, *GetResourceBYGroupIdReq) (*ResourceByGroupIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceBYGroupId not implemented")
}
func (UnimplementedResourceUsegServiceServer) mustEmbedUnimplementedResourceUsegServiceServer() {}

// UnsafeResourceUsegServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceUsegServiceServer will
// result in compilation errors.
type UnsafeResourceUsegServiceServer interface {
	mustEmbedUnimplementedResourceUsegServiceServer()
}

func RegisterResourceUsegServiceServer(s grpc.ServiceRegistrar, srv ResourceUsegServiceServer) {
	s.RegisterService(&ResourceUsegService_ServiceDesc, srv)
}

func _ResourceUsegService_CreateResourceUseg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceUsegReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceUsegServiceServer).CreateResourceUseg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceUsegService_CreateResourceUseg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceUsegServiceServer).CreateResourceUseg(ctx, req.(*CreateResourceUsegReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceUsegService_GetAllResourceUseg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllResourceUsegReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceUsegServiceServer).GetAllResourceUseg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceUsegService_GetAllResourceUseg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceUsegServiceServer).GetAllResourceUseg(ctx, req.(*GetAllResourceUsegReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceUsegService_DeleteResourceUseg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceUsegReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceUsegServiceServer).DeleteResourceUseg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceUsegService_DeleteResourceUseg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceUsegServiceServer).DeleteResourceUseg(ctx, req.(*DeleteResourceUsegReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceUsegService_GetResourceBYGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceBYGroupIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceUsegServiceServer).GetResourceBYGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceUsegService_GetResourceBYGroupId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceUsegServiceServer).GetResourceBYGroupId(ctx, req.(*GetResourceBYGroupIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceUsegService_ServiceDesc is the grpc.ServiceDesc for ResourceUsegService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceUsegService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ResourceUsegService",
	HandlerType: (*ResourceUsegServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResourceUseg",
			Handler:    _ResourceUsegService_CreateResourceUseg_Handler,
		},
		{
			MethodName: "GetAllResourceUseg",
			Handler:    _ResourceUsegService_GetAllResourceUseg_Handler,
		},
		{
			MethodName: "DeleteResourceUseg",
			Handler:    _ResourceUsegService_DeleteResourceUseg_Handler,
		},
		{
			MethodName: "GetResourceBYGroupId",
			Handler:    _ResourceUsegService_GetResourceBYGroupId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource-useg/resource_useg.proto",
}
