// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.5
// source: resource-useg/resource_useg.proto

package resource_useg1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StorehouseService_CreateStorehouse_FullMethodName = "/storehouse.v1.StorehouseService/CreateStorehouse"
	StorehouseService_GetAllStorehouse_FullMethodName = "/storehouse.v1.StorehouseService/GetAllStorehouse"
	StorehouseService_DeleteStorehouse_FullMethodName = "/storehouse.v1.StorehouseService/DeleteStorehouse"
)

// StorehouseServiceClient is the client API for StorehouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorehouseServiceClient interface {
	CreateStorehouse(ctx context.Context, in *CreateStorehouseReq, opts ...grpc.CallOption) (*Storehouse, error)
	GetAllStorehouse(ctx context.Context, in *GetAllStorehouseReq, opts ...grpc.CallOption) (*GetAllStorehouseRes, error)
	DeleteStorehouse(ctx context.Context, in *DeleteStorehouseReq, opts ...grpc.CallOption) (*DeleteStorehouseRes, error)
}

type storehouseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorehouseServiceClient(cc grpc.ClientConnInterface) StorehouseServiceClient {
	return &storehouseServiceClient{cc}
}

func (c *storehouseServiceClient) CreateStorehouse(ctx context.Context, in *CreateStorehouseReq, opts ...grpc.CallOption) (*Storehouse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Storehouse)
	err := c.cc.Invoke(ctx, StorehouseService_CreateStorehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storehouseServiceClient) GetAllStorehouse(ctx context.Context, in *GetAllStorehouseReq, opts ...grpc.CallOption) (*GetAllStorehouseRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllStorehouseRes)
	err := c.cc.Invoke(ctx, StorehouseService_GetAllStorehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storehouseServiceClient) DeleteStorehouse(ctx context.Context, in *DeleteStorehouseReq, opts ...grpc.CallOption) (*DeleteStorehouseRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStorehouseRes)
	err := c.cc.Invoke(ctx, StorehouseService_DeleteStorehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorehouseServiceServer is the server API for StorehouseService service.
// All implementations must embed UnimplementedStorehouseServiceServer
// for forward compatibility
type StorehouseServiceServer interface {
	CreateStorehouse(context.Context, *CreateStorehouseReq) (*Storehouse, error)
	GetAllStorehouse(context.Context, *GetAllStorehouseReq) (*GetAllStorehouseRes, error)
	DeleteStorehouse(context.Context, *DeleteStorehouseReq) (*DeleteStorehouseRes, error)
	mustEmbedUnimplementedStorehouseServiceServer()
}

// UnimplementedStorehouseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorehouseServiceServer struct {
}

func (UnimplementedStorehouseServiceServer) CreateStorehouse(context.Context, *CreateStorehouseReq) (*Storehouse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStorehouse not implemented")
}
func (UnimplementedStorehouseServiceServer) GetAllStorehouse(context.Context, *GetAllStorehouseReq) (*GetAllStorehouseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStorehouse not implemented")
}
func (UnimplementedStorehouseServiceServer) DeleteStorehouse(context.Context, *DeleteStorehouseReq) (*DeleteStorehouseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStorehouse not implemented")
}
func (UnimplementedStorehouseServiceServer) mustEmbedUnimplementedStorehouseServiceServer() {}

// UnsafeStorehouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorehouseServiceServer will
// result in compilation errors.
type UnsafeStorehouseServiceServer interface {
	mustEmbedUnimplementedStorehouseServiceServer()
}

func RegisterStorehouseServiceServer(s grpc.ServiceRegistrar, srv StorehouseServiceServer) {
	s.RegisterService(&StorehouseService_ServiceDesc, srv)
}

func _StorehouseService_CreateStorehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStorehouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseServiceServer).CreateStorehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorehouseService_CreateStorehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseServiceServer).CreateStorehouse(ctx, req.(*CreateStorehouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorehouseService_GetAllStorehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStorehouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseServiceServer).GetAllStorehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorehouseService_GetAllStorehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseServiceServer).GetAllStorehouse(ctx, req.(*GetAllStorehouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorehouseService_DeleteStorehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStorehouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseServiceServer).DeleteStorehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorehouseService_DeleteStorehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseServiceServer).DeleteStorehouse(ctx, req.(*DeleteStorehouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StorehouseService_ServiceDesc is the grpc.ServiceDesc for StorehouseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorehouseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storehouse.v1.StorehouseService",
	HandlerType: (*StorehouseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStorehouse",
			Handler:    _StorehouseService_CreateStorehouse_Handler,
		},
		{
			MethodName: "GetAllStorehouse",
			Handler:    _StorehouseService_GetAllStorehouse_Handler,
		},
		{
			MethodName: "DeleteStorehouse",
			Handler:    _StorehouseService_DeleteStorehouse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource-useg/resource_useg.proto",
}
