// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.5
// source: storehouses/storehouses.proto

package storehouses1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StorehouseService_CreateStorehouse_FullMethodName = "/StorehouseService/CreateStorehouse"
	StorehouseService_GetStorehouse_FullMethodName    = "/StorehouseService/GetStorehouse"
	StorehouseService_GetAllStorehouse_FullMethodName = "/StorehouseService/GetAllStorehouse"
	StorehouseService_UpdateStorehouse_FullMethodName = "/StorehouseService/UpdateStorehouse"
)

// StorehouseServiceClient is the client API for StorehouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorehouseServiceClient interface {
	CreateStorehouse(ctx context.Context, in *CreateStorehouseReq, opts ...grpc.CallOption) (*Storehouse, error)
	GetStorehouse(ctx context.Context, in *GetStorehouseReq, opts ...grpc.CallOption) (*Storehouse, error)
	GetAllStorehouse(ctx context.Context, in *GetAllStorehouseReq, opts ...grpc.CallOption) (*GetAllStorehouseRes, error)
	UpdateStorehouse(ctx context.Context, in *UpdateStorehouseReq, opts ...grpc.CallOption) (*Storehouse, error)
}

type storehouseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorehouseServiceClient(cc grpc.ClientConnInterface) StorehouseServiceClient {
	return &storehouseServiceClient{cc}
}

func (c *storehouseServiceClient) CreateStorehouse(ctx context.Context, in *CreateStorehouseReq, opts ...grpc.CallOption) (*Storehouse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Storehouse)
	err := c.cc.Invoke(ctx, StorehouseService_CreateStorehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storehouseServiceClient) GetStorehouse(ctx context.Context, in *GetStorehouseReq, opts ...grpc.CallOption) (*Storehouse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Storehouse)
	err := c.cc.Invoke(ctx, StorehouseService_GetStorehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storehouseServiceClient) GetAllStorehouse(ctx context.Context, in *GetAllStorehouseReq, opts ...grpc.CallOption) (*GetAllStorehouseRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllStorehouseRes)
	err := c.cc.Invoke(ctx, StorehouseService_GetAllStorehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storehouseServiceClient) UpdateStorehouse(ctx context.Context, in *UpdateStorehouseReq, opts ...grpc.CallOption) (*Storehouse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Storehouse)
	err := c.cc.Invoke(ctx, StorehouseService_UpdateStorehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorehouseServiceServer is the server API for StorehouseService service.
// All implementations must embed UnimplementedStorehouseServiceServer
// for forward compatibility
type StorehouseServiceServer interface {
	CreateStorehouse(context.Context, *CreateStorehouseReq) (*Storehouse, error)
	GetStorehouse(context.Context, *GetStorehouseReq) (*Storehouse, error)
	GetAllStorehouse(context.Context, *GetAllStorehouseReq) (*GetAllStorehouseRes, error)
	UpdateStorehouse(context.Context, *UpdateStorehouseReq) (*Storehouse, error)
	mustEmbedUnimplementedStorehouseServiceServer()
}

// UnimplementedStorehouseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorehouseServiceServer struct {
}

func (UnimplementedStorehouseServiceServer) CreateStorehouse(context.Context, *CreateStorehouseReq) (*Storehouse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStorehouse not implemented")
}
func (UnimplementedStorehouseServiceServer) GetStorehouse(context.Context, *GetStorehouseReq) (*Storehouse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorehouse not implemented")
}
func (UnimplementedStorehouseServiceServer) GetAllStorehouse(context.Context, *GetAllStorehouseReq) (*GetAllStorehouseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStorehouse not implemented")
}
func (UnimplementedStorehouseServiceServer) UpdateStorehouse(context.Context, *UpdateStorehouseReq) (*Storehouse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStorehouse not implemented")
}
func (UnimplementedStorehouseServiceServer) mustEmbedUnimplementedStorehouseServiceServer() {}

// UnsafeStorehouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorehouseServiceServer will
// result in compilation errors.
type UnsafeStorehouseServiceServer interface {
	mustEmbedUnimplementedStorehouseServiceServer()
}

func RegisterStorehouseServiceServer(s grpc.ServiceRegistrar, srv StorehouseServiceServer) {
	s.RegisterService(&StorehouseService_ServiceDesc, srv)
}

func _StorehouseService_CreateStorehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStorehouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseServiceServer).CreateStorehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorehouseService_CreateStorehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseServiceServer).CreateStorehouse(ctx, req.(*CreateStorehouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorehouseService_GetStorehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorehouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseServiceServer).GetStorehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorehouseService_GetStorehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseServiceServer).GetStorehouse(ctx, req.(*GetStorehouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorehouseService_GetAllStorehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStorehouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseServiceServer).GetAllStorehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorehouseService_GetAllStorehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseServiceServer).GetAllStorehouse(ctx, req.(*GetAllStorehouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorehouseService_UpdateStorehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStorehouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseServiceServer).UpdateStorehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorehouseService_UpdateStorehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseServiceServer).UpdateStorehouse(ctx, req.(*UpdateStorehouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StorehouseService_ServiceDesc is the grpc.ServiceDesc for StorehouseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorehouseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StorehouseService",
	HandlerType: (*StorehouseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStorehouse",
			Handler:    _StorehouseService_CreateStorehouse_Handler,
		},
		{
			MethodName: "GetStorehouse",
			Handler:    _StorehouseService_GetStorehouse_Handler,
		},
		{
			MethodName: "GetAllStorehouse",
			Handler:    _StorehouseService_GetAllStorehouse_Handler,
		},
		{
			MethodName: "UpdateStorehouse",
			Handler:    _StorehouseService_UpdateStorehouse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storehouses/storehouses.proto",
}

const (
	ResourceTypeService_CreateResourceType_FullMethodName = "/ResourceTypeService/CreateResourceType"
	ResourceTypeService_GetResourceType_FullMethodName    = "/ResourceTypeService/GetResourceType"
	ResourceTypeService_GetAllResourceType_FullMethodName = "/ResourceTypeService/GetAllResourceType"
	ResourceTypeService_UpdateResourceType_FullMethodName = "/ResourceTypeService/UpdateResourceType"
	ResourceTypeService_DeleteResourceType_FullMethodName = "/ResourceTypeService/DeleteResourceType"
)

// ResourceTypeServiceClient is the client API for ResourceTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceTypeServiceClient interface {
	CreateResourceType(ctx context.Context, in *CreateResourceTypeReq, opts ...grpc.CallOption) (*ResourceType, error)
	GetResourceType(ctx context.Context, in *GetResourceTypeReq, opts ...grpc.CallOption) (*ResourceType, error)
	GetAllResourceType(ctx context.Context, in *GetAllResourceTypeReq, opts ...grpc.CallOption) (*GetAllResourceTypeRes, error)
	UpdateResourceType(ctx context.Context, in *UpdateResourceTypeReq, opts ...grpc.CallOption) (*ResourceType, error)
	DeleteResourceType(ctx context.Context, in *DeleteResourceTypeReq, opts ...grpc.CallOption) (*Status, error)
}

type resourceTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceTypeServiceClient(cc grpc.ClientConnInterface) ResourceTypeServiceClient {
	return &resourceTypeServiceClient{cc}
}

func (c *resourceTypeServiceClient) CreateResourceType(ctx context.Context, in *CreateResourceTypeReq, opts ...grpc.CallOption) (*ResourceType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceType)
	err := c.cc.Invoke(ctx, ResourceTypeService_CreateResourceType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceTypeServiceClient) GetResourceType(ctx context.Context, in *GetResourceTypeReq, opts ...grpc.CallOption) (*ResourceType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceType)
	err := c.cc.Invoke(ctx, ResourceTypeService_GetResourceType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceTypeServiceClient) GetAllResourceType(ctx context.Context, in *GetAllResourceTypeReq, opts ...grpc.CallOption) (*GetAllResourceTypeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllResourceTypeRes)
	err := c.cc.Invoke(ctx, ResourceTypeService_GetAllResourceType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceTypeServiceClient) UpdateResourceType(ctx context.Context, in *UpdateResourceTypeReq, opts ...grpc.CallOption) (*ResourceType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceType)
	err := c.cc.Invoke(ctx, ResourceTypeService_UpdateResourceType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceTypeServiceClient) DeleteResourceType(ctx context.Context, in *DeleteResourceTypeReq, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, ResourceTypeService_DeleteResourceType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceTypeServiceServer is the server API for ResourceTypeService service.
// All implementations must embed UnimplementedResourceTypeServiceServer
// for forward compatibility
type ResourceTypeServiceServer interface {
	CreateResourceType(context.Context, *CreateResourceTypeReq) (*ResourceType, error)
	GetResourceType(context.Context, *GetResourceTypeReq) (*ResourceType, error)
	GetAllResourceType(context.Context, *GetAllResourceTypeReq) (*GetAllResourceTypeRes, error)
	UpdateResourceType(context.Context, *UpdateResourceTypeReq) (*ResourceType, error)
	DeleteResourceType(context.Context, *DeleteResourceTypeReq) (*Status, error)
	mustEmbedUnimplementedResourceTypeServiceServer()
}

// UnimplementedResourceTypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResourceTypeServiceServer struct {
}

func (UnimplementedResourceTypeServiceServer) CreateResourceType(context.Context, *CreateResourceTypeReq) (*ResourceType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceType not implemented")
}
func (UnimplementedResourceTypeServiceServer) GetResourceType(context.Context, *GetResourceTypeReq) (*ResourceType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceType not implemented")
}
func (UnimplementedResourceTypeServiceServer) GetAllResourceType(context.Context, *GetAllResourceTypeReq) (*GetAllResourceTypeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllResourceType not implemented")
}
func (UnimplementedResourceTypeServiceServer) UpdateResourceType(context.Context, *UpdateResourceTypeReq) (*ResourceType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceType not implemented")
}
func (UnimplementedResourceTypeServiceServer) DeleteResourceType(context.Context, *DeleteResourceTypeReq) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceType not implemented")
}
func (UnimplementedResourceTypeServiceServer) mustEmbedUnimplementedResourceTypeServiceServer() {}

// UnsafeResourceTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceTypeServiceServer will
// result in compilation errors.
type UnsafeResourceTypeServiceServer interface {
	mustEmbedUnimplementedResourceTypeServiceServer()
}

func RegisterResourceTypeServiceServer(s grpc.ServiceRegistrar, srv ResourceTypeServiceServer) {
	s.RegisterService(&ResourceTypeService_ServiceDesc, srv)
}

func _ResourceTypeService_CreateResourceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceTypeServiceServer).CreateResourceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceTypeService_CreateResourceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceTypeServiceServer).CreateResourceType(ctx, req.(*CreateResourceTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceTypeService_GetResourceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceTypeServiceServer).GetResourceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceTypeService_GetResourceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceTypeServiceServer).GetResourceType(ctx, req.(*GetResourceTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceTypeService_GetAllResourceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllResourceTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceTypeServiceServer).GetAllResourceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceTypeService_GetAllResourceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceTypeServiceServer).GetAllResourceType(ctx, req.(*GetAllResourceTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceTypeService_UpdateResourceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceTypeServiceServer).UpdateResourceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceTypeService_UpdateResourceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceTypeServiceServer).UpdateResourceType(ctx, req.(*UpdateResourceTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceTypeService_DeleteResourceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceTypeServiceServer).DeleteResourceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceTypeService_DeleteResourceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceTypeServiceServer).DeleteResourceType(ctx, req.(*DeleteResourceTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceTypeService_ServiceDesc is the grpc.ServiceDesc for ResourceTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ResourceTypeService",
	HandlerType: (*ResourceTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResourceType",
			Handler:    _ResourceTypeService_CreateResourceType_Handler,
		},
		{
			MethodName: "GetResourceType",
			Handler:    _ResourceTypeService_GetResourceType_Handler,
		},
		{
			MethodName: "GetAllResourceType",
			Handler:    _ResourceTypeService_GetAllResourceType_Handler,
		},
		{
			MethodName: "UpdateResourceType",
			Handler:    _ResourceTypeService_UpdateResourceType_Handler,
		},
		{
			MethodName: "DeleteResourceType",
			Handler:    _ResourceTypeService_DeleteResourceType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storehouses/storehouses.proto",
}
